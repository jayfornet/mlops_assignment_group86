name: MLOps Monitoring Pipeline - Prometheus & Grafana

# This workflow handles monitoring stack changes only
# Main MLOps pipeline changes trigger the separate mlops-pipeline.yml workflow

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'monitoring/**'
      - 'docker-compose.monitoring.yml'
      - 'Dockerfile.monitoring'
      - '.github/workflows/monitoring-pipeline.yml'
      - 'scripts/setup_monitoring.py'
      - 'scripts/load_test_monitoring.py'
  pull_request:
    branches: [ main ]
    paths:
      - 'monitoring/**'
      - 'docker-compose.monitoring.yml'
      - 'Dockerfile.monitoring'
      - 'scripts/setup_monitoring.py'
      - 'scripts/load_test_monitoring.py'
  workflow_dispatch:  # Allow manual triggers

# Prevent multiple monitoring builds
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

env:
  MONITORING_IMAGE_NAME: housing-prediction-monitoring
  DOCKER_REGISTRY: docker.io
  PYTHON_VERSION: 3.9

jobs:
  # Build and Test Monitoring Configuration
  test-monitoring-config:
    runs-on: ubuntu-latest
    name: Test Monitoring Configuration
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate Prometheus Configuration
      run: |
        # Install Prometheus config checker
        wget https://github.com/prometheus/prometheus/releases/download/v2.47.0/prometheus-2.47.0.linux-amd64.tar.gz
        tar xzf prometheus-2.47.0.linux-amd64.tar.gz
        
        # Check Prometheus config syntax
        echo "🔍 Validating Prometheus configuration..."
        ./prometheus-2.47.0.linux-amd64/promtool check config monitoring/prometheus.yml
        echo "✅ Prometheus configuration is valid"
        
    - name: Validate Docker Compose Configuration
      run: |
        echo "🔍 Validating Docker Compose configuration..."
        # Check if docker compose is available (modern syntax)
        if docker compose version > /dev/null 2>&1; then
          echo "✅ Using modern docker compose"
          docker compose -f docker-compose.monitoring.yml config
        elif docker-compose --version > /dev/null 2>&1; then
          echo "✅ Using legacy docker-compose"
          docker-compose -f docker-compose.monitoring.yml config
        else
          echo "❌ Neither docker compose nor docker-compose found"
          echo "Installing docker-compose as fallback..."
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose -f docker-compose.monitoring.yml config
        fi
        echo "✅ Docker Compose configuration is valid"
        
    - name: Validate Grafana Configuration
      run: |
        echo "🔍 Checking Grafana configuration files..."
        
        # Check if required files exist
        if [ ! -f "monitoring/grafana/provisioning/datasources/prometheus.yml" ]; then
          echo "❌ Missing Grafana datasource configuration"
          exit 1
        fi
        
        if [ ! -f "monitoring/grafana/provisioning/dashboards/dashboard.yml" ]; then
          echo "❌ Missing Grafana dashboard configuration"
          exit 1
        fi
        
        if [ ! -f "monitoring/grafana/dashboards/mlops-monitoring.json" ]; then
          echo "❌ Missing MLOps dashboard"
          exit 1
        fi
        
        echo "✅ All Grafana configuration files present"
        
        # Validate JSON dashboard
        echo "🔍 Validating dashboard JSON..."
        python -m json.tool monitoring/grafana/dashboards/mlops-monitoring.json > /dev/null
        echo "✅ Dashboard JSON is valid"

  # Build Monitoring Docker Image
  build-monitoring:
    runs-on: ubuntu-latest
    name: Build Monitoring Stack
    needs: [test-monitoring-config]
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build monitoring image locally for testing
      run: |
        echo "🔨 Building monitoring stack image..."
        docker build -f Dockerfile.monitoring -t ${{ env.MONITORING_IMAGE_NAME }}:test .
        
    - name: Test monitoring image
      run: |
        echo "🧪 Testing monitoring image..."
        
        # Test that the image runs and contains expected files
        docker run --rm ${{ env.MONITORING_IMAGE_NAME }}:test ls -la /monitoring/
        docker run --rm ${{ env.MONITORING_IMAGE_NAME }}:test cat /monitoring/prometheus.yml | head -10
        
        echo "✅ Monitoring image test passed"
        
    - name: Build and push monitoring image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.monitoring
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.MONITORING_IMAGE_NAME }}:latest
          ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.MONITORING_IMAGE_NAME }}:${{ github.sha }}
        platforms: linux/amd64
        cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.MONITORING_IMAGE_NAME }}:buildcache
        cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.MONITORING_IMAGE_NAME }}:buildcache,mode=max
